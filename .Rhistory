install.packages("rsconnect")
Bú! Supresa! Que comecem os festejos! :)
Parabéns, meu coração! Parabéns por tudo o que você construiu ao longo desses anos (não vamos falar em números!) na sua vidinha. Esta mensagenzinha é só para te dizer que eu te amo muito, muito, muito, e quero te amar para sempre. Sou louco, alucinado por você.
Você merece tudo de bom que a vida pode oferecer. Te amo!
...
rsconnect::setAccountInfo(name='tiagombp', token='12EE61E68B99676EF8A80C7A4E2BF354', secret='wrD4SQWlESeVEweBByt6fgybmXMayz8xZL2uCZn4')
library(rsconnect)
setwd("C:/Users/tiago.pereira/GitHub/puddles-puddles")
rsconnect::deployApp('C:/Users/tiago.pereira/GitHub/puddles-puddles/puddles_MCTI.Rmd')
library(tidyverse)
library(readxl)
library(extrafont)
library(kableExtra)
library(lubridate)
library(gganimate)
library(scales)
library(ggrepel)
library(xts)
library(dygraphs)
loadfonts()
tema <- function(){
theme_minimal() +
theme(
text = element_text(family = "Source Sans Pro", colour = "grey20"),
axis.text = element_text(family = "Source Sans Pro", colour = "grey20"),
title = element_text(face = "bold"),
plot.subtitle = element_text(face = "plain"),
plot.caption = element_text(face = "italic"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.text = element_text(size = 8),
legend.title = element_text(size = 8),
axis.ticks.x = element_line(),
axis.title = element_text(size = 7),
legend.position = 'bottom')
}
# rsconnect::deployApp('C:/Users/tiago.pereira/GitHub/puddles-puddles/puddles_MCTI.Rmd')
dados_Siafi <- read_excel("data/MCTI_lim_saque_liq_pagar.xlsx", skip = 5)
colnames(dados_Siafi) <- c(
"codOrgao",
"nomeOrgao",
"Data",
"Item",
"Movimento")
# criar uma tabelinha com os códigos e nomes dos órgãos para posteriormente levar essas informações à tabela processada
nomes_orgaos <- read.csv2("orgaosMCTI.csv")
nomes_orgaos$codOrgao <- as.character(nomes_orgaos$codOrgao)
# mostrar a tabela do Siafi
tail(dados_Siafi, 5)
dados <- dados_Siafi %>%
filter(!(codOrgao %in% c("49280", "20502"))) %>% # (1)
mutate(Date     = if_else(str_sub(Data, 1, 4) == "000/",
as.Date(paste0(str_sub(Data, 5, 8),"-01-01")),
dmy(Data))) %>%
group_by(Date, codOrgao, Item) %>%
summarise(Movimento = sum(Movimento)) %>% # (1a)
ungroup() %>% # (1b)
unite(classificador, Item, codOrgao, sep = "__") %>% # (2)
select(Date, classificador, Movimento) %>%
spread(key = classificador, value = Movimento, fill = 0) %>% # (2b)
complete(Date = seq(min(Date), max(Date), by = "days")) %>% # (3)
replace(is.na(.), 0) %>% # (3a)
mutate_at(-1, funs(cumsum(.))) %>% # (4)
mutate(data_num = factor(paste0(year(Date), # (5)
str_sub(Date, 6, 7),
str_sub(Date, 9, 10)))) %>%
gather(c(-"data_num", -"Date"), key = classificador, value = saldo) %>% # (6)
separate(classificador, c("item", "codOrgao"), sep = "__") %>%
spread(key = item, value = saldo, fill = 0) %>%
rename(Caixa      = `LIMITES DE SAQUE (OFSS, DIVIDA, BACEN E PREV)`,
Obrigacoes = `VALORES LIQUIDADOS A PAGAR (EXERCICIO + RP)`) %>%
mutate(Saldo      = Caixa - Obrigacoes)
# (1) filtrando valor indevido registrado nos correios e em outro órgão (que são não OFSS).
# (1a) esse group_by com summarise é para somar eventuais registros repetidos. Ou seja, preciso ficar com um movimento para cada dia, para cada orgao. como atribuí que o saldo de abertura seria um movimento no dia 01/01, e tinha um caso em que havia de fato movimento no dia 01/01 em um orgao, apareciam dois registros no dia 01/01 nesse orgao. o summarise elimina esse problema.
# (1b) por um motivo que ainda não entendo, sem esse ungroup ele não calcula o cumsum corretamente.
# (2) unindo os dois classificadores (item e orgao) para poder fazer um spread só, depois vou separá-los.
# (2b) com o spread, um orgao que eventualmente não possuía movimento em determinado dia vai aparecer com "NA". Preenchi com 0 pq depois vou usar o cumsum para calcular os saldos.
# (3) o complete vai completar as datas faltantes considerando a sequencia de dias entre o menor e o maior dia presente nos dados. Os valores para esses dias faltantes serão completados com "NA", então...
# (3a) uso o replace para substituir esses NAs por 0.
# (4) agora uso o cumsum para calcular os totais acumulados em cada coluna (que neste ponto se referem a cada órgão.) usei o -1 na referência do mutate_at para calcular essa soma acumulada para TODAS as colunas, EXCETO a primeira (pq ela é a data).
# (5) preciso dessa data nesse formato para fazer a animação.
# (6) agora, de maneira semelhante, uso o "-" para dizer que quero empilhar todas as colunas, exceto as colunas de data numeria e de data.
head(dados)
write.csv2(dados, "dados.csv")
# elaborar sumários para gráficos (e para ordenar os órgãos por média descrescente)
sumario_dados <- dados %>%
group_by(codOrgao) %>%
summarise(minimo      = min(Caixa, na.rm = TRUE),
data_min    = Date[which.min(Caixa)],
maximo      = max(Caixa, na.rm = TRUE),
data_max    = Date[which.max(Caixa)],
mediana     = median(Caixa, na.rm = TRUE),
media       = mean(Caixa),
media_obrig = mean(Obrigacoes)) %>%
ungroup() %>%
arrange(desc(media)) %>%
left_join(nomes_orgaos) %>%
mutate(codOrgao   = fct_reorder(codOrgao, media, desc = TRUE), # (1)
nomeOrgao  = fct_reorder(nomeOrgao, media, desc = TRUE),
siglaOrgao = fct_reorder(siglaOrgao, media, desc = TRUE),
Orgao      = paste(codOrgao, nomeOrgao, sep = " - "))
sumario_barplot <- sumario_dados %>%
select(codOrgao, nomeOrgao, siglaOrgao, Orgao, media, media_obrig) %>%
gather(c(media, media_obrig), key = variavel, value = valor) %>%
mutate(variavel = factor(variavel, levels = c("media_obrig", "media"))) # (2)
# (1) só para mudar a ordem das barras no plot logo abaixo.
dados <- dados %>%
left_join(sumario_dados)
# (2) tem um jeito melhor de ordenar vários factors pelo mesmo critério? talvez com purr::map()...
cores <- RColorBrewer::brewer.pal(3, "Set2")
nomes_series <- c("Caixa", "Obrigacoes", "Saldo")
names(cores) <- nomes_series
cores_barras <- c("media_obrig" = cores[["Obrigacoes"]], "media" = cores[["Caixa"]])
graf_barras <- function(dados_plot, complemento_titulo) {
ggplot(dados_plot, aes(y = valor, x = siglaOrgao, fill = variavel)) +
geom_bar(stat = "identity", color = "white", position = "dodge") +
geom_text(aes(y = valor + 2000, label = paste(format(round(valor/1000000,0),
big.mark = ".", decimal.mark = ","), "mi"),
color = variavel),
size = 3,
hjust = 0,
position = position_dodge(1), # (0)
family = "Source Sans Pro") +
coord_flip() +
scale_color_manual(values = cores_barras) +
scale_fill_manual(values = cores_barras,
labels = c("media_obrig" = "Obrigações", "media" = "Caixa")) +
scale_y_continuous(labels = function(x) {format(x/1000000, big.mark = ".", decimal.mark=",", scientific = FALSE)}) +
labs(y = "Valores em milhões de R$",
x = NULL,
fill = NULL,
title = paste0("Média dos saldos financeiros diários - caixa x obrigações - ", complemento_titulo),
subtitle = "Período de janeiro de 2017 a agosto de 2018") +
expand_limits(y = max(sumario_dados$valor) * 1.05) +
tema() + guides(color = FALSE) # (1)
# (0) precisa passar um "width" para a position_dodge para posicionar o label corretamente.
# (1) para não mostrar a legenda apenas para o color (que foi usado no geom_text)
}
graf_barras(sumario_barplot, "órgãos do MCTI")
graf_barras(sumario_barplot %>% filter(codOrgao != "41231"), "órgãos do MCTI (exceto ANATEL)")
qde_orgaos <- length(unique(dados$Orgao))
graf_estatico <- ggplot(dados, aes(y = Caixa, x = siglaOrgao)) +
geom_tile(aes(y = round(Caixa,0)), fill = cores["Caixa"], alpha = 0.1, width = 1, height = 0.01) +
coord_flip() +
geom_hline(yintercept = min(dados$Caixa), linetype = "dotted") +
geom_hline(yintercept = mean(dados$Caixa), linetype = "dotted") +
geom_hline(yintercept = median(dados$Caixa), linetype = "dotted") +
annotate(geom = "text", x = qde_orgaos + 1, y = min(dados$Caixa),
label = paste("Mínimo geral: ",
format(round(min(dados$Caixa),0),
big.mark = ".", decimal.mark = ",")),
color = "grey50", size = 3, hjust = 0,
family = "Source Sans Pro") +
annotate(geom = "text", x = qde_orgaos + 1, y = mean(dados$Caixa),
label = paste("Média geral: ",
format(round(mean(dados$Caixa),0),
big.mark = ".", decimal.mark = ",")),
color = "grey50", size = 3, hjust = 0,
family = "Source Sans Pro") +
annotate(geom = "text", x = qde_orgaos + 1, y = median(dados$Caixa),
label = paste("Mediana geral: ",
format(round(median(dados$Caixa),0),
big.mark = ".", decimal.mark = ",")),
color = "grey50", size = 3, hjust = 0,
family = "Source Sans Pro") +
scale_y_log10(labels = function(x) {format(x, big.mark = ".", decimal.mark=",", scientific = FALSE)}) +
labs(y = "Valores em R$ (escala logarítmica)",
x = NULL,
title = "Caixa diário - Ministério da Ciência e Tecnologia da Informação",
subtitle = "Período de janeiro de 2017 a agosto de 2018") +
expand_limits(y = max(dados$Saldo) * 2, x = qde_orgaos + 1.2) +
tema() + theme(legend.position = "none")
graf_estatico
graf_estatico + geom_boxplot(color = "darkgrey")
graf_gif <- graf_estatico +
geom_tile(aes(y = ifelse(Date>data_min, minimo,NA)), fill = "firebrick", alpha = 0.4, width = 1, height = 0.03) +
geom_tile(aes(y = ifelse(Date>data_max, maximo,NA)), fill = "navy", alpha = 0.4, width = 1, height = 0.03) +
geom_text(aes(y = ifelse(Date>data_min, minimo * 0.95,NA),
label = paste(format(round(minimo/1000000,1), big.mark = ".", decimal.mark=",", scientific = FALSE), "mi")),
hjust = 1,
size = 4,
family = "Source Sans Pro",
fontface = "plain",
color = "firebrick"
) +
geom_text(aes(y = ifelse(Date>data_max, maximo * 1.05,NA),
label = paste(format(round(maximo/1000000,1), big.mark = ".", decimal.mark=",", scientific = FALSE), "mi")),
hjust = 0,
size = 4,
family = "Source Sans Pro",
fontface = "plain",
color = "navy"
) +
labs(subtitle = "Posição em {frame_time}") +
tema() + theme(legend.position = "none") +
transition_time(Date) +
ease_aes('linear')
animate(graf_gif, nframes = 200, height = 480, width = 672)
anim_save("caixa_diario.gif", animation = last_animation())
triangulo_superior <- data.frame("x" = c(1, 1e+10, 1),
"y" = c(1, 1e+10, 1e+10))
triangulo_inferior <- data.frame("x" = c(1, 1e+10, 1e+10),
"y" = c(1, 1e+10, 1))
ggplot(dados %>% filter(Date == "2017-01-02"),
aes(y = Caixa,
x = ifelse(Obrigacoes <= 0, 1, Obrigacoes))) + # color = Caixa > Obrigacoes
geom_polygon(data = triangulo_superior,
aes(x = x, y = y),
fill = "dodgerblue",
alpha = 0.1) +
geom_polygon(data = triangulo_inferior,
aes(x = x, y = y),
fill = "red",
alpha = 0.1) +
geom_label(aes(fill = siglaOrgao, label = siglaOrgao), color = "white", size = 3) +
geom_abline(intercept = 0, slope = 1, linetype="dotted") +
scale_x_log10(limits=c(1, 1e+10),
labels = function(x) {format(x/1000, big.mark = ".", decimal.mark=",", scientific = FALSE)}) +
scale_y_log10(limits=c(1, 1e+10),
labels = function(x) {format(x/1000, big.mark = ".", decimal.mark=",", scientific = FALSE)}) +
scale_fill_manual(values = c("AEB" = "cyan",
"MCTI" = "dodgerblue",
"SPOA" = "dodgerblue",
"ANATEL" = "firebrick",
"NUCLEBRAS" = "darkcyan",
"INB" = "darkturquoise",
"INPE" = "gray",
"FINTEL" = "coral",
"FUST" = "coral",
"FUNTTEL" = "coral",
"FNDCT" = "coral",
"CTI" = "gray",
"CEITEC " = "gray",
"CNPq" = "gray",
"CNEN" = "darkgray",
"CNTEA" = "lightslategray")) +
labs(y = "Caixa (R$ mil)",
x = "Obrigações a pagar (R$ mil)",
title = "Caixa e obrigações (decorrentes da execução orçamentária) a pagar dos órgãos do MCTI",
subtitle = "Saldos diários em {frame_time}") +
tema() + theme(legend.position = "none")
scat <- ggplot(dados,
aes(y = Caixa,
x = ifelse(Obrigacoes <= 0, 1, Obrigacoes))) + # color = Caixa > Obrigacoes
geom_polygon(data = triangulo_superior,
aes(x = x, y = y),
fill = "dodgerblue",
alpha = 0.1) +
geom_polygon(data = triangulo_inferior,
aes(x = x,
y = y),
fill = "red",
alpha = 0.1) +
geom_label(aes(fill = siglaOrgao, label = siglaOrgao), color = "white", size = 3) +
geom_abline(intercept = 0, slope = 1, linetype="dotted") +
scale_x_log10(limits=c(1,1e+10),
labels = function(x) {format(x/1000, big.mark = ".", decimal.mark=",", scientific = FALSE)}) +
scale_y_log10(limits=c(1,1e+10),
labels = function(x) {format(x/1000, big.mark = ".", decimal.mark=",", scientific = FALSE)}) +
scale_fill_manual(values = c("AEB" = "cyan",
"MCTI" = "dodgerblue",
"SPOA" = "dodgerblue",
"ANATEL" = "firebrick",
"NUCLEBRAS" = "darkcyan",
"INB" = "darkturquoise",
"INPE" = "gray",
"FINTEL" = "coral",
"FUST" = "coral",
"FUNTTEL" = "coral",
"FNDCT" = "coral",
"CTI" = "gray",
"CEITEC " = "gray",
"CNPq" = "gray",
"CNEN" = "darkgray",
"CNTEA" = "lightslategray")) +
labs(y = "Caixa (R$ mil)",
x = "Obrigações a pagar (R$ mil)",
title = "Caixa e obrigações (decorrentes da execução orçamentária) a pagar dos órgãos do MCTI",
subtitle = "Saldos diários em {frame_time}") +
tema() + theme(legend.position = "none") +
transition_time(Date) +
ease_aes('linear')
animate(scat, nframes = 500, height = 600, width = 600)
anim_save("scat2.gif", animation = last_animation())
plot_dif <- ggplot(sumario_CxLiq_plot,
aes(group = siglaOrgao)) +
geom_ribbon(aes(x = x_positivo, ymin = 0, ymax = media_caixa), fill = "dodgerblue") +
geom_ribbon(aes(x = x_negativo, ymin = -media_obrig, ymax = 0), fill = "red") +
scale_y_continuous(labels = function(x) {format(x/1000, big.mark = ".", decimal.mark=",", scientific = FALSE)}) +
labs(y = "Valores (R$ mil)",
x = "Quantidade de dias",
title = "Caixa x Obrigações a pagar",
subtitle = "Média e quantidade de dias com saldo positivo e negativo") +
geom_text(aes(x = ifelse(posicao == "x1", x_positivo/2, NA),
y = -media_obrig/2,
label = paste("Dias positivos: ", x_positivo)),
color = "dodgerblue", size = 3,
hjust = 0,
position = "identity",
family = "Source Sans Pro") +
tema()
sumario_CxLiq <- dados %>%
mutate(dia_positivo = Caixa > Obrigacoes,
dia_negativo = Caixa <=Obrigacoes) %>%
group_by(siglaOrgao) %>%
summarise(
media_caixa   = mean(Caixa),
media_obrig   = mean(Obrigacoes),
dias_positivo = sum(dia_positivo),
dias_negativo = sum(dia_negativo)
) %>%
ungroup() %>%
mutate(x0_positivo = 0,
x1_positivo = dias_positivo,
x0_negativo = dias_positivo,
x1_negativo = dias_positivo + dias_negativo)
sumario_CxLiq_positivo <- sumario_CxLiq %>%
select(siglaOrgao, media_caixa, x0_positivo, x1_positivo) %>%
rename(x0 = x0_positivo,
x1 = x1_positivo) %>%
gather(3:4, key = posicao, value = x_positivo)
sumario_CxLiq_negativo <- sumario_CxLiq %>%
select(siglaOrgao, media_obrig, x0_negativo, x1_negativo) %>%
rename(x0 = x0_negativo,
x1 = x1_negativo) %>%
gather(3:4, key = posicao, value = x_negativo)
sumario_CxLiq_plot <- sumario_CxLiq_positivo %>%
left_join(sumario_CxLiq_negativo)
sumario_CxLiq_barplot <- sumario_CxLiq %>%
select(siglaOrgao, dias_positivo, dias_negativo) %>%
mutate(siglaOrgao = factor(siglaOrgao),
siglaOrgao = fct_reorder(siglaOrgao, dias_positivo, desc = FALSE)) %>%
gather(dias_positivo, dias_negativo, key = "tipoDia", value = "quantidade")
ggplot(sumario_CxLiq_barplot,
aes(y = quantidade, x = siglaOrgao, fill = tipoDia)) +
geom_bar( stat="identity", position="fill", width=0.6, color = "white", size = 1) +
coord_flip() +
scale_fill_manual(values = c("dias_positivo" = "dodgerblue", "dias_negativo" = "red"), labels = c("dias_positivo" = "Dias com sobra de caixa", "dias_negativo" = "Dias com falta de caixa")) +
scale_y_continuous(labels = scales::percent) +
labs(
title = "Caixa x obrigações a pagar",
subtitle = "Quantidade de dias com sobra ou insuficiência de caixa",
x = NULL,
y = NULL,
fill = NULL) +
tema()
plot_dif <- ggplot(sumario_CxLiq_plot,
aes(group = siglaOrgao)) +
geom_ribbon(aes(x = x_positivo, ymin = 0, ymax = media_caixa), fill = "dodgerblue") +
geom_ribbon(aes(x = x_negativo, ymin = -media_obrig, ymax = 0), fill = "red") +
scale_y_continuous(labels = function(x) {format(x/1000, big.mark = ".", decimal.mark=",", scientific = FALSE)}) +
labs(y = "Valores (R$ mil)",
x = "Quantidade de dias",
title = "Caixa x Obrigações a pagar",
subtitle = "Média e quantidade de dias com saldo positivo e negativo") +
geom_text(aes(x = ifelse(posicao == "x1", x_positivo/2, NA),
y = -media_obrig/2,
label = paste("Dias positivos: ", x_positivo)),
color = "dodgerblue", size = 3,
hjust = 0,
position = "identity",
family = "Source Sans Pro") +
tema()
plot_dif <- ggplot(sumario_CxLiq_plot,
aes(group = siglaOrgao)) +
geom_ribbon(aes(x = x_positivo, ymin = 0, ymax = media_caixa), fill = "dodgerblue") +
geom_ribbon(aes(x = x_negativo, ymin = -media_obrig, ymax = 0), fill = "red") +
scale_y_continuous(labels = function(x) {format(x/1000, big.mark = ".", decimal.mark=",", scientific = FALSE)}) +
labs(y = "Valores (R$ mil)",
x = "Quantidade de dias",
title = "Caixa x Obrigações a pagar",
subtitle = "Média e quantidade de dias com saldo positivo e negativo") +
geom_text(aes(x = ifelse(posicao == "x1", x_positivo/2, NA),
y = -media_obrig/2,
label = paste("Dias positivos: ", x_positivo)),
color = "dodgerblue", size = 3,
hjust = 0,
position = "identity",
family = "Source Sans Pro") +
tema() +
transition_states(siglaOrgao)
plot_dif <- ggplot(sumario_CxLiq_plot,
aes(group = siglaOrgao)) +
geom_ribbon(aes(x = x_positivo, ymin = 0, ymax = media_caixa), fill = "dodgerblue") +
geom_ribbon(aes(x = x_negativo, ymin = -media_obrig, ymax = 0), fill = "red") +
scale_y_continuous(labels = function(x) {format(x/1000, big.mark = ".", decimal.mark=",", scientific = FALSE)}) +
labs(y = "Valores (R$ mil)",
x = "Quantidade de dias",
title = "Caixa x Obrigações a pagar",
subtitle = "Média e quantidade de dias com saldo positivo e negativo") +
geom_text(aes(x = ifelse(posicao == "x1", x_positivo/2, NA),
y = -media_obrig/2,
label = paste("Dias positivos: ", x_positivo)),
color = "dodgerblue", size = 3,
hjust = 0,
position = "identity",
family = "Source Sans Pro") +
tema() +
transition_states(siglaOrgao,
transition_length = 2,
state_length = 1) +
plot_dif <- ggplot(sumario_CxLiq_plot,
aes(group = siglaOrgao)) +
geom_ribbon(aes(x = x_positivo, ymin = 0, ymax = media_caixa), fill = "dodgerblue") +
geom_ribbon(aes(x = x_negativo, ymin = -media_obrig, ymax = 0), fill = "red") +
scale_y_continuous(labels = function(x) {format(x/1000, big.mark = ".", decimal.mark=",", scientific = FALSE)}) +
labs(y = "Valores (R$ mil)",
x = "Quantidade de dias",
title = "Caixa x Obrigações a pagar",
subtitle = "Média e quantidade de dias com saldo positivo e negativo") +
geom_text(aes(x = ifelse(posicao == "x1", x_positivo/2, NA),
y = -media_obrig/2,
label = paste("Dias positivos: ", x_positivo)),
color = "dodgerblue", size = 3,
hjust = 0,
position = "identity",
family = "Source Sans Pro") +
tema() +
transition_states(siglaOrgao,
transition_length = 2,
state_length = 1)
animate(plot_dif, nframes = length(unique(sumario_CxLiq_plot$siglaOrgao)), fps = 3)
plot_dif <- ggplot(sumario_CxLiq_plot,
aes(group = siglaOrgao)) +
geom_ribbon(aes(x = x_positivo, ymin = 0, ymax = media_caixa), fill = "dodgerblue") +
geom_ribbon(aes(x = x_negativo, ymin = -media_obrig, ymax = 0), fill = "red") +
scale_y_continuous(labels = function(x) {format(x/1000, big.mark = ".", decimal.mark=",", scientific = FALSE)}) +
labs(y = "Valores (R$ mil)",
x = "Quantidade de dias",
title = "Caixa x Obrigações a pagar",
subtitle = "Média e quantidade de dias com saldo positivo e negativo") +
tema() +
transition_states(siglaOrgao,
transition_length = 2,
state_length = 1)
animate(plot_dif, nframes = length(unique(sumario_CxLiq_plot$siglaOrgao)), fps = 3)
animate(plot_dif, nframes = 15, fps = 3)
rsconnect::deployApp('C:/Users/tiago.pereira/GitHub/puddles-puddles/puddles_MCTI.Rmd')
rsconnect::deployApp('C:/Users/tiago.pereira/GitHub/puddles-puddles/puddles_MCTI.Rmd')
rsconnect::deployApp('C:/Users/tiago.pereira/GitHub/puddles-puddles/puddles_MCTI.Rmd')
lista_orgaos
lista_orgaos <- unique(dados$siglaOrgao)
gera_xts <- function(orgao) {
dados_xts <- dados %>%
filter(siglaOrgao == orgao) %>%
select(Date, Caixa, Obrigacoes, Saldo) %>%
mutate_at(-1, funs(./1000000))
sh_xts <- xts(dados_xts[,-1], order.by = dados_xts$Date)
}
lista_xts <- lapply(lista_orgaos, gera_xts)
names(lista_xts) <- lista_orgaos
# gerar um total
xts_total <- lista_xts[[1]]
for (i in 2:length(lista_xts)) {
xts_total <- xts_total + lista_xts[[i]]
}
# um total sem Aanatel
xts_total_semAnatel <- xts_total - lista_xts[["41231"]]
# incorporando esses totais
lista_xts[[length(lista_xts)+1]] <- xts_total_semAnatel
lista_xts[[length(lista_xts)+1]] <- xts_total
lista_orgaos <- c(lista_orgaos, "Total sem Anatel", "Total")
names(lista_xts) <- lista_orgaos
lista_orgaos <- unique(dados$siglaOrgao)
gera_xts <- function(orgao) {
dados_xts <- dados %>%
filter(siglaOrgao == orgao) %>%
select(Date, Caixa, Obrigacoes, Saldo) %>%
mutate_at(-1, funs(./1000000))
sh_xts <- xts(dados_xts[,-1], order.by = dados_xts$Date)
}
lista_xts <- lapply(lista_orgaos, gera_xts)
names(lista_xts) <- lista_orgaos
# gerar um total
xts_total <- lista_xts[[1]]
for (i in 2:length(lista_xts)) {
xts_total <- xts_total + lista_xts[[i]]
}
# um total sem Aanatel
xts_total_semAnatel <- xts_total - lista_xts[["41231"]]
# incorporando esses totais
lista_xts[[length(lista_xts)+1]] <- xts_total_semAnatel
lista_xts[[length(lista_xts)+1]] <- xts_total
lista_orgaos <- c(lista_orgaos, "Total sem Anatel", "Total")
names(lista_xts) <- lista_orgaos
lista_orgaos
dados$siglaOrgao
lista_orgaos <- unique(as.character(dados$siglaOrgao))
lista_orgaos
lista_orgaos <- unique(as.character(dados$siglaOrgao))
gera_xts <- function(orgao) {
dados_xts <- dados %>%
filter(siglaOrgao == orgao) %>%
select(Date, Caixa, Obrigacoes, Saldo) %>%
mutate_at(-1, funs(./1000000))
sh_xts <- xts(dados_xts[,-1], order.by = dados_xts$Date)
}
lista_xts <- lapply(lista_orgaos, gera_xts)
names(lista_xts) <- lista_orgaos
# gerar um total
xts_total <- lista_xts[[1]]
for (i in 2:length(lista_xts)) {
xts_total <- xts_total + lista_xts[[i]]
}
# um total sem Aanatel
xts_total_semAnatel <- xts_total - lista_xts[["41231"]]
# incorporando esses totais
lista_xts[[length(lista_xts)+1]] <- xts_total_semAnatel
lista_xts[[length(lista_xts)+1]] <- xts_total
lista_orgaos <- c(lista_orgaos, "Total sem Anatel", "Total")
names(lista_xts) <- lista_orgaos
rsconnect::deployApp('C:/Users/tiago.pereira/GitHub/puddles-puddles/puddles_MCTI.Rmd')
