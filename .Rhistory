color = "firebrick",
linetype = "dotted",
position = position_nudge(y = -0.1)) +
geom_segment(aes(x    = Saldo_anterior + Recebimentos + Receitas + AnulacoesDespesas + AjustesContabeisPos + AjustesContabeisNeg + Despesas + Liberacoes,
xend = Saldo_anterior + Recebimentos + Receitas + AnulacoesDespesas + AjustesContabeisPos + AjustesContabeisNeg + Despesas + Liberacoes + AjustesReceitas),
color = "grey70", position = position_nudge(y = -0.1)) +
geom_vline(xintercept = minimo, linetype = "dotted") +
geom_vline(xintercept = media, linetype = "dotted") +
annotate(geom = "text", y = length(dados_plot$data_num) + 1, x = minimo,
label = paste("Mínimo para o período: R$",
format(round(minimo,0),
big.mark = ".", decimal.mark = ",")),
color = "grey50", size = 3, hjust = 0,
family = "Source Sans Pro") +
annotate(geom = "text", y = length(dados_plot$data_num) + 1, x = media,
label = paste("Média para o período: R$",
format(round(media,0),
big.mark = ".", decimal.mark = ",")),
color = "grey50", size = 3, hjust = 0,
family = "Source Sans Pro") +
scale_y_discrete(limits = rev(dados_plot$data_num),
labels = function(x) {paste(str_sub(x, 7, 8),
str_sub(x, 5, 6),
str_sub(x, 1, 4), sep = "/")}) +
scale_x_continuous(labels = function(x) {format(x/1000000, big.mark = ".", decimal.mark=",", scientific = FALSE)}) +
labs(x = "Valores em milhões de R$",
y = NULL,
title = "Saldos (pontos) e Movimentações diárias (linhas) - MCTI",
subtitle = "Período de janeiro de 2017 a abril de 2017") +
expand_limits(y = length(dados_plot$data_num) + 2) +
tema() + theme(legend.position = "none")
library(Cairo)
library(CairoPNG)
install.packages("Cairo")
library(Cairo)
library(cairo)
library(Cairo)
library(CairoPNG)
library(Cairo)
require(Cairo)
install.packages("Cairo")
Cairo()
rsconnect::deployApp('C:/Users/tiago.pereira/GitHub/puddles-puddles/puddles_MCTI.Rmd')
install.packages("DT")
library(DT)
dados_heatmap <- dados %>%
select(Date, Saldo) %>%
filter(year(Date) == 2017)
library(tidyverse)
library(readxl)
library(extrafont)
library(kableExtra)
library(lubridate)
#library(gganimate)
library(scales)
library(ggrepel)
library(xts)
library(dygraphs)
library(formattable)
library(DT)
loadfonts()
tema <- function(){
theme_minimal() +
theme(
text = element_text(family = "Source Sans Pro", colour = "grey20"),
axis.text = element_text(family = "Source Sans Pro", colour = "grey20"),
title = element_text(face = "bold"), # size para o Shiny
plot.subtitle = element_text(face = "plain", size = 9),
plot.caption = element_text(face = "italic"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.text = element_text(size = 8),
legend.title = element_text(size = 8),
axis.ticks.x = element_line(),
axis.title = element_text(size = 7),
legend.position = 'bottom')
}
# rsconnect::deployApp('C:/Users/tiago.pereira/GitHub/puddles-puddles/puddles_MCTI.Rmd')
dados_Siafi <- read_excel("data/MCTI_lim_saque_liq_pagar.xlsx", skip = 5)
colnames(dados_Siafi) <- c(
"codOrgao",
"nomeOrgao",
"Data",
"Item",
"Movimento")
# criar uma tabelinha com os códigos e nomes dos órgãos para posteriormente levar essas informações à tabela processada
nomes_orgaos <- read.csv2("orgaosMCTI.csv")
nomes_orgaos$codOrgao <- as.character(nomes_orgaos$codOrgao)
# mostrar a tabela do Siafi
formattable(tail(dados_Siafi, 10))
dados <- dados_Siafi %>%
filter(!(codOrgao %in% c("49280", "20502"))) %>% # (1)
mutate(Date     = if_else(str_sub(Data, 1, 4) == "000/",
as.Date(paste0(str_sub(Data, 5, 8),"-01-01")),
dmy(Data))) %>%
group_by(Date, codOrgao, Item) %>%
summarise(Movimento = sum(Movimento)) %>% # (1a)
ungroup() %>% # (1b)
unite(classificador, Item, codOrgao, sep = "__") %>% # (2)
select(Date, classificador, Movimento) %>%
spread(key = classificador, value = Movimento, fill = 0) %>% # (2b)
complete(Date = seq(min(Date), max(Date), by = "days")) %>% # (3)
replace(is.na(.), 0) %>% # (3a)
mutate_at(-1, funs(cumsum(.))) %>% # (4)
mutate(data_num = factor(paste0(year(Date), # (5)
str_sub(Date, 6, 7),
str_sub(Date, 9, 10)))) %>%
gather(c(-"data_num", -"Date"), key = classificador, value = saldo) %>% # (6)
separate(classificador, c("item", "codOrgao"), sep = "__") %>%
spread(key = item, value = saldo, fill = 0) %>%
rename(Caixa      = `LIMITES DE SAQUE (OFSS, DIVIDA, BACEN E PREV)`,
Obrigacoes = `VALORES LIQUIDADOS A PAGAR (EXERCICIO + RP)`) %>%
mutate(Saldo      = Caixa - Obrigacoes)
# (1) filtrando valor indevido registrado nos correios e em outro órgão (que são não OFSS).
# (1a) esse group_by com summarise é para somar eventuais registros repetidos. Ou seja, preciso ficar com um movimento para cada dia, para cada orgao. como atribuí que o saldo de abertura seria um movimento no dia 01/01, e tinha um caso em que havia de fato movimento no dia 01/01 em um orgao, apareciam dois registros no dia 01/01 nesse orgao. o summarise elimina esse problema.
# (1b) por um motivo que ainda não entendo, sem esse ungroup ele não calcula o cumsum corretamente.
# (2) unindo os dois classificadores (item e orgao) para poder fazer um spread só, depois vou separá-los.
# (2b) com o spread, um orgao que eventualmente não possuía movimento em determinado dia vai aparecer com "NA". Preenchi com 0 pq depois vou usar o cumsum para calcular os saldos.
# (3) o complete vai completar as datas faltantes considerando a sequencia de dias entre o menor e o maior dia presente nos dados. Os valores para esses dias faltantes serão completados com "NA", então...
# (3a) uso o replace para substituir esses NAs por 0.
# (4) agora uso o cumsum para calcular os totais acumulados em cada coluna (que neste ponto se referem a cada órgão.) usei o -1 na referência do mutate_at para calcular essa soma acumulada para TODAS as colunas, EXCETO a primeira (pq ela é a data).
# (5) preciso dessa data nesse formato para fazer a animação.
# (6) agora, de maneira semelhante, uso o "-" para dizer que quero empilhar todas as colunas, exceto as colunas de data numeria e de data.
head(dados)
write.csv2(dados, "dados.csv")
# elaborar sumários para gráficos (e para ordenar os órgãos por média descrescente)
sumario_dados <- dados %>%
group_by(codOrgao) %>%
summarise(minimo      = min(Caixa, na.rm = TRUE),
data_min    = Date[which.min(Caixa)],
maximo      = max(Caixa, na.rm = TRUE),
data_max    = Date[which.max(Caixa)],
mediana     = median(Caixa, na.rm = TRUE),
media       = mean(Caixa),
media_obrig = mean(Obrigacoes)) %>%
ungroup() %>%
arrange(desc(media)) %>%
left_join(nomes_orgaos) %>%
mutate(codOrgao   = fct_reorder(codOrgao, media, desc = TRUE), # (1)
nomeOrgao  = fct_reorder(nomeOrgao, media, desc = TRUE),
siglaOrgao = fct_reorder(siglaOrgao, media, desc = TRUE),
Orgao      = paste(codOrgao, nomeOrgao, sep = " - "))
sumario_barplot <- sumario_dados %>%
select(codOrgao, nomeOrgao, siglaOrgao, Orgao, media, media_obrig) %>%
gather(c(media, media_obrig), key = variavel, value = valor) %>%
mutate(variavel = factor(variavel, levels = c("media_obrig", "media"))) # (2)
# (1) só para mudar a ordem das barras no plot logo abaixo.
dados <- dados %>%
left_join(sumario_dados)
# (2) tem um jeito melhor de ordenar vários factors pelo mesmo critério? talvez com purr::map()...
cores <- RColorBrewer::brewer.pal(3, "Set2")
nomes_series <- c("Caixa", "Obrigacoes", "Saldo")
names(cores) <- nomes_series
cores_barras <- c("media_obrig" = cores[["Obrigacoes"]], "media" = cores[["Caixa"]])
graf_barras <- function(dados_plot, complemento_titulo) {
ggplot(dados_plot, aes(y = valor, x = siglaOrgao, fill = variavel)) +
geom_bar(stat = "identity", color = "white", position = "dodge") +
geom_text(aes(y = valor + 2000, label = paste(format(round(valor/1000000,0),
big.mark = ".", decimal.mark = ","), "mi"),
color = variavel),
size = 3,
hjust = 0,
position = position_dodge(1), # (0)
family = "Source Sans Pro") +
coord_flip() +
scale_color_manual(values = cores_barras) +
scale_fill_manual(values = cores_barras,
labels = c("media_obrig" = "Obrigações", "media" = "Caixa")) +
scale_y_continuous(labels = function(x) {format(x/1000000, big.mark = ".", decimal.mark=",", scientific = FALSE)}) +
labs(y = "Valores em milhões de R$",
x = NULL,
fill = NULL,
title = paste0("Média dos saldos financeiros diários - caixa x obrigações - ", complemento_titulo),
subtitle = "Período de janeiro de 2017 a agosto de 2018") +
expand_limits(y = max(sumario_dados$valor) * 1.05) +
tema() + guides(color = FALSE) # (1)
# (0) precisa passar um "width" para a position_dodge para posicionar o label corretamente.
# (1) para não mostrar a legenda apenas para o color (que foi usado no geom_text)
}
graf_barras(sumario_barplot, "órgãos do MCTI")
graf_barras(sumario_barplot %>% filter(codOrgao != "41231"), "órgãos do MCTI (exceto ANATEL)")
qde_orgaos <- length(unique(dados$Orgao))
graf_estatico <- ggplot(dados, aes(y = Caixa, x = siglaOrgao)) +
geom_tile(aes(y = round(Caixa,0)), fill = cores["Caixa"], alpha = 0.1, width = 1, height = 0.01) +
coord_flip() +
geom_hline(yintercept = min(dados$Caixa), linetype = "dotted") +
geom_hline(yintercept = mean(dados$Caixa), linetype = "dotted") +
geom_hline(yintercept = median(dados$Caixa), linetype = "dotted") +
annotate(geom = "text", x = qde_orgaos + 1, y = min(dados$Caixa),
label = paste("Mínimo geral: ",
format(round(min(dados$Caixa),0),
big.mark = ".", decimal.mark = ",")),
color = "grey50", size = 3, hjust = 0,
family = "Source Sans Pro") +
annotate(geom = "text", x = qde_orgaos + 1, y = mean(dados$Caixa),
label = paste("Média geral: ",
format(round(mean(dados$Caixa),0),
big.mark = ".", decimal.mark = ",")),
color = "grey50", size = 3, hjust = 0,
family = "Source Sans Pro") +
annotate(geom = "text", x = qde_orgaos + 1, y = median(dados$Caixa),
label = paste("Mediana geral: ",
format(round(median(dados$Caixa),0),
big.mark = ".", decimal.mark = ",")),
color = "grey50", size = 3, hjust = 0,
family = "Source Sans Pro") +
scale_y_log10(labels = function(x) {format(x, big.mark = ".", decimal.mark=",", scientific = FALSE)}) +
labs(y = "Valores em R$ (escala logarítmica)",
x = NULL,
title = "Caixa diário - Órgãos do MCTI",
subtitle = "Período de janeiro de 2017 a agosto de 2018") +
expand_limits(y = max(dados$Saldo) * 2, x = qde_orgaos + 1.2) +
tema() + theme(legend.position = "none")
graf_estatico
graf_estatico + geom_boxplot(color = "darkgrey")
triangulo_superior <- data.frame("x" = c(1, 1e+10, 1),
"y" = c(1, 1e+10, 1e+10))
triangulo_inferior <- data.frame("x" = c(1, 1e+10, 1e+10),
"y" = c(1, 1e+10, 1))
ggplot(dados %>% filter(Date == "2017-01-02"),
aes(y = Caixa,
x = ifelse(Obrigacoes <= 0, 1, Obrigacoes))) + # color = Caixa > Obrigacoes
geom_polygon(data = triangulo_superior,
aes(x = x, y = y),
fill = "dodgerblue",
alpha = 0.1) +
geom_polygon(data = triangulo_inferior,
aes(x = x, y = y),
fill = "red",
alpha = 0.1) +
geom_label(aes(fill = siglaOrgao, label = siglaOrgao), color = "white", size = 3) +
geom_abline(intercept = 0, slope = 1, linetype="dotted") +
scale_x_log10(limits=c(1, 1e+10),
labels = function(x) {format(x/1000, big.mark = ".", decimal.mark=",", scientific = FALSE)}) +
scale_y_log10(limits=c(1, 1e+10),
labels = function(x) {format(x/1000, big.mark = ".", decimal.mark=",", scientific = FALSE)}) +
scale_fill_manual(values = c("AEB" = "cyan",
"MCTI" = "dodgerblue",
"SPOA" = "dodgerblue",
"ANATEL" = "firebrick",
"NUCLEBRAS" = "darkcyan",
"INB" = "darkturquoise",
"INPE" = "gray",
"FINTEL" = "coral",
"FUST" = "coral",
"FUNTTEL" = "coral",
"FNDCT" = "coral",
"CTI" = "gray",
"CEITEC " = "gray",
"CNPq" = "gray",
"CNEN" = "darkgray",
"CNTEA" = "lightslategray")) +
labs(y = "Caixa (R$ mil, log)",
x = "Obrigações a pagar (R$ mil, log)",
title = "Caixa e obrigações a pagar dos órgãos do MCTI",
subtitle = "Saldos no dia 2017-01-02") +
tema() + theme(legend.position = "none")
# scat <- ggplot(dados,
#        aes(y = Caixa,
#            x = ifelse(Obrigacoes <= 0, 1, Obrigacoes))) + # color = Caixa > Obrigacoes
#   geom_polygon(data = triangulo_superior,
#                aes(x = x, y = y),
#                fill = "dodgerblue",
#                alpha = 0.1) +
#   geom_polygon(data = triangulo_inferior,
#                aes(x = x,
#                    y = y),
#                fill = "red",
#                alpha = 0.1) +
#   geom_label(aes(fill = siglaOrgao, label = siglaOrgao), color = "white", size = 3) +
#   geom_abline(intercept = 0, slope = 1, linetype="dotted") +
#   scale_x_log10(limits=c(1,1e+10),
#                 labels = function(x) {format(x/1000, big.mark = ".", decimal.mark=",", scientific = FALSE)}) +
#   scale_y_log10(limits=c(1,1e+10),
#                 labels = function(x) {format(x/1000, big.mark = ".", decimal.mark=",", scientific = FALSE)}) +
#   scale_fill_manual(values = c("AEB" = "cyan",
#                                "MCTI" = "dodgerblue",
#                                "SPOA" = "dodgerblue",
#                                "ANATEL" = "firebrick",
#                                "NUCLEBRAS" = "darkcyan",
#                                "INB" = "darkturquoise",
#                                "INPE" = "gray",
#                                "FINTEL" = "coral",
#                                "FUST" = "coral",
#                                "FUNTTEL" = "coral",
#                                "FNDCT" = "coral",
#                                "CTI" = "gray",
#                                "CEITEC " = "gray",
#                                "CNPq" = "gray",
#                                "CNEN" = "darkgray",
#                                "CNTEA" = "lightslategray")) +
#   labs(y = "Caixa (R$ mil)",
#        x = "Obrigações a pagar (R$ mil)",
#        title = "Caixa e obrigações (decorrentes da execução orçamentária) a pagar dos órgãos do MCTI",
#        subtitle = "Saldos diários em {frame_time}") +
#   tema() + theme(legend.position = "none") +
#   transition_time(Date) +
#   ease_aes('linear')
#animate(scat, nframes = 500, height = 600, width = 600)
#anim_save("scat2.gif", animation = last_animation())
plot_connected_scatterplot <- function(dados){
ggplot(dados,
aes(y = Caixa,
x = ifelse(Obrigacoes <= 0, 1, Obrigacoes))) + # color = Caixa > Obrigacoes
geom_polygon(data = triangulo_superior,
aes(x = x,
y = y),
fill = "dodgerblue",
alpha = 0.1) +
geom_polygon(data = triangulo_inferior,
aes(x = x,
y = y),
fill = "red",
alpha = 0.1) +
geom_path(color = "gray") +
geom_point(aes(color = Caixa > Obrigacoes), alpha = 0.7) +
geom_abline(intercept = 0, slope = 1, linetype="dotted") +
scale_x_log10(limits=c(1,1e+10),
labels = function(x) {format(x/1000, big.mark = ".", decimal.mark=",", scientific = FALSE)}) +
scale_y_log10(limits=c(1,1e+10),
labels = function(x) {format(x/1000, big.mark = ".", decimal.mark=",", scientific = FALSE)}) +
scale_color_manual(values = c("TRUE" = "dodgerblue", "FALSE" = "red"),
guide = FALSE) +
labs(y = "Caixa (R$ mil)",
x = "Obrigações a pagar (R$ mil)",
title = "Caixa x Obrigações a pagar",
subtitle = "Eixos em escala logarítmica") +
tema()
}
plot_connected_scatterplot(dados %>% filter(codOrgao == "24000")) + labs(subtitle = "Órgão 24000 - MCTI (Administração Direta)")
plot_connected_scatterplot(dados) + facet_wrap(~ siglaOrgao, ncol = 3)
lista_orgaos <- unique(as.character(dados$siglaOrgao))
gera_xts <- function(orgao) {
dados_xts <- dados %>%
filter(siglaOrgao == orgao) %>%
select(Date, Caixa, Obrigacoes, Saldo) %>%
mutate_at(-1, funs(./1000000))
sh_xts <- xts(dados_xts[,-1], order.by = dados_xts$Date)
}
lista_xts <- lapply(lista_orgaos, gera_xts)
names(lista_xts) <- lista_orgaos
# gerar um total
xts_total <- lista_xts[[1]]
for (i in 2:length(lista_xts)) {
xts_total <- xts_total + lista_xts[[i]]
}
# um total sem Aanatel
xts_total_semAnatel <- xts_total - lista_xts[["41231"]]
# incorporando esses totais
lista_xts[[length(lista_xts)+1]] <- xts_total_semAnatel
lista_xts[[length(lista_xts)+1]] <- xts_total
lista_orgaos <- c(lista_orgaos, "Total sem Anatel", "Total")
names(lista_xts) <- lista_orgaos
inputPanel(
selectInput("orgao", label = "Órgão do MCTI:",
choices = lista_orgaos, selected = lista_orgaos[1]),
radioButtons("periodicidade", label = "Periodicidade",
choiceNames = c("Diários", "Semanais", "Mensais"),
choiceValues = c("days", "weeks", "months"),
selected = "days"),
checkboxGroupInput("variavel", label = "Série",
choiceNames  = c("Caixa", "Obrigações", "Saldo"),
choiceValues = c("Caixa", "Obrigacoes", "Saldo"),
selected     = c("Caixa", "Obrigacoes", "Saldo"))
)
dados_xts_MCTI_direta <- dados %>%
filter(codOrgao == "24000") %>%
select(Date, Caixa, Obrigacoes, Saldo)
library(ggTimeSeries)
dados_xts_MCTI_direta_heatmap <- dados_xts_MCTI_direta
ggplot_calendar_heatmap(
dados_xts_MCTI_direta_heatmap,
'Date',
'Saldo',
monthBorderSize = 0.75,
dayBorderColour = "lightgrey"
)   +
xlab(NULL) +
ylab(NULL) +
scale_fill_gradient2(labels = function(x) {format(x/1000000, big.mark = ".", decimal.mark=",", scientific = FALSE)}) +
tema() +
labs(
fill = "Saldo (em R$ milhões)"
) +
facet_wrap(~Year, ncol = 1)
#  scale_fill_continuous(low = 'red', high = 'blue') +
dados_heatmap <- dados %>%
select(Date, Saldo) %>%
filter(year(Date) == 2017)
View(dados_heatmap)
dados_heatmap <- dados %>%
select(Date, siglaOrgao, Saldo) %>%
filter(year(Date) == 2017)
View(dados_heatmap)
dados_heatmap <- dados %>%
select(Date, siglaOrgao, Saldo) %>%
filter(year(Date) == 2017)
ggplot_calendar_heatmap(
dados_xts_MCTI_direta_heatmap,
'Date',
'Saldo',
monthBorderSize = 0.75,
dayBorderColour = "lightgrey"
)   +
xlab(NULL) +
ylab(NULL) +
scale_fill_gradient2(labels = function(x) {format(x/1000000, big.mark = ".", decimal.mark=",", scientific = FALSE)}) +
tema() +
labs(
fill = "Saldo (em R$ milhões)"
) +
facet_wrap(~siglaOrgao, ncol = 1)
dados_heatmap <- dados %>%
select(Date, siglaOrgao, Saldo) %>%
filter(year(Date) == 2017)
ggplot_calendar_heatmap(
dados_heatmap,
'Date',
'Saldo',
monthBorderSize = 0.75,
dayBorderColour = "lightgrey"
)   +
xlab(NULL) +
ylab(NULL) +
scale_fill_gradient2(labels = function(x) {format(x/1000000, big.mark = ".", decimal.mark=",", scientific = FALSE)}) +
tema() +
labs(
fill = "Saldo (em R$ milhões)"
) +
facet_wrap(~siglaOrgao, ncol = 1)
dados_heatmap <- dados %>%
select(Date, siglaOrgao, Saldo) %>%
filter(year(Date) == 2017)
ggplot_calendar_heatmap(
dados_heatmap,
'Date',
'Saldo',
monthBorderSize = 0.75,
dayBorderColour = "lightgrey"
)   +
xlab(NULL) +
ylab(NULL) +
scale_fill_gradient2(labels = function(x) {format(x/1000000, big.mark = ".", decimal.mark=",", scientific = FALSE)}) +
tema() +
labs(
fill = "Saldo (em R$ milhões)"
) +
facet_wrap(~siglaOrgao, ncol = 1)
dados_heatmap <- dados %>%
filter(siglaOrgao != "ANATEL") %>%
select(Date, siglaOrgao, Saldo) %>%
filter(year(Date) == 2017)
ggplot_calendar_heatmap(
dados_heatmap,
'Date',
'Saldo',
monthBorderSize = 0.75,
dayBorderColour = "lightgrey"
)   +
xlab(NULL) +
ylab(NULL) +
scale_fill_gradient2(labels = function(x) {format(x/1000000, big.mark = ".", decimal.mark=",", scientific = FALSE)}) +
tema() +
labs(
fill = "Saldo (em R$ milhões)"
) +
facet_wrap(~siglaOrgao, ncol = 1)
dados_heatmap <- dados %>%
filter(siglaOrgao != "ANATEL") %>%
select(Date, siglaOrgao, Saldo) %>%
filter(year(Date) == 2017)
ggplot_calendar_heatmap(
dados_heatmap,
'Date',
'Saldo',
monthBorderSize = 0.75,
dayBorderColour = "lightgrey"
)   +
xlab(NULL) +
ylab(NULL) +
scale_fill_gradient2(labels = function(x) {format(x/1000000, big.mark = ".", decimal.mark=",", scientific = FALSE)}) +
tema() +
labs(
fill = "Saldo (em R$ milhões)"
) +
facet_wrap(~siglaOrgao, ncol = 1)
ultimos_dias <- seq(as.Date("2017-01-01"), length = 21, by = "1 month") - 1
ultimos_dias
subset(dados, dados$Date == ultimos_dias)
subset(dados, dados$Date %in% ultimos_dias)
ultimos_dias <- seq(as.Date("2017-01-01"), length = 21, by = "1 month") - 1
planilha <- subset(dados, dados$Date %in% ultimos_dias) %>%
mutate(mes = paste(Year(Date),month(Date))) %>%
select(mes, codOrgao, Caixa, Obrigacoes, Saldo)
ultimos_dias <- seq(as.Date("2017-01-01"), length = 21, by = "1 month") - 1
planilha <- subset(dados, dados$Date %in% ultimos_dias) %>%
mutate(mes = paste(year(Date),month(Date))) %>%
select(mes, codOrgao, Caixa, Obrigacoes, Saldo)
write.csv(planilha, "verifica.csv")
ultimos_dias <- seq(as.Date("2017-01-01"), length = 21, by = "1 month") - 1
planilha <- subset(dados, dados$Date %in% ultimos_dias) %>%
mutate(mes = paste(year(Date),month(Date))) %>%
select(mes, codOrgao, Caixa, Obrigacoes, Saldo)
write.csv(planilha, "verifica.csv")
setwd("C:/Users/tiago.pereira/GitHub/puddles-puddles")
write.csv(planilha, "verifica.csv")
write.csv2(planilha, "verifica.csv")
version()
version
View(dados)
write.csv2(dados %>% filter(codOrgao == "20501") %>% select(Date, data_num, Obrigacoes), "Cnpq.csv")
rsconnect::deployApp('C:/Users/tiago.pereira/GitHub/puddles-puddles/puddles_MCTI.Rmd')
